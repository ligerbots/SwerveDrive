// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package swerve.subsystems;
import swerve.Robot.RobotMap;

import edu.wpi.first.wpilibj.can.CANTimeoutException;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import swerve.Robot.Robot;


/**
 *
 */
public class Swerve extends Subsystem {
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANJaguar swerveLeft = RobotMap.swerveLeft;
    CANJaguar swerveRight = RobotMap.swerveRight;
    RobotDrive swerveDrive = RobotMap.swerveDrive;

    // Constants to define the minimum and maximum angles for the shooter.
    // TODO: These must be updated once we make the measurements
    // This is the minimum voltage from the sensor when the shooter is at
    // it's minimum angle
    
               
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    public void swerve() {
        System.out.println("swerve constructed.");
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    public void turnSwerveWheels(double swervePower) {
        //Robot.oi.joystick1.getTwist()
        if (swerveLeft != null  && swerveRight != null) {
            try {
                swerveLeft.setX(swervePower);
            } catch (CANTimeoutException ex) {
                System.out.println("swerveLeft timeoutException: " + ex.getMessage());
            }
             try {
                swerveRight.setX(swervePower);
            } catch (CANTimeoutException ex) {
                System.out.println("swerveRight timeoutException: " + ex.getMessage());
            }
        }
    }
    public void turnSwerveWheel(double swervePower) {
        //Robot.oi.joystick1.getTwist()
        if (swerveLeft != null  && swerveRight != null) {
            try {
                if (swervePower == 1) {
                    swerveLeft.setX(swervePower);
                    System.out.println("Calibration Turn on Left Side");
                }
                else {
                    swerveRight.setX(Math.abs(swervePower));
                    System.out.println("Calibration Turn on Right Side");
                }
            } catch (CANTimeoutException ex) {
                System.out.println("swerve motor timeoutException: " + ex.getMessage());
            }
             
        }
    }
    
    public void calibrate(double x) { 
       if (swerveLeft != null  && swerveRight != null) {
            //set movement to use quadrature encoders as given
            //move both jags 10 rotations with cpr = 360
              try {
                swerveLeft.enableControl();
                swerveRight.enableControl();
                System.out.println("swerveRight initial Position: " + swerveRight.getPosition());
                System.out.println("swerveLeft initial Position: " + swerveLeft.getPosition());
                swerveRight.setX(x);
            } catch (CANTimeoutException ex) {
                ex.printStackTrace();
            }           
            try { 
                SmartDashboard.putNumber("enc LEFT pos: ",swerveLeft.getPosition() );
                SmartDashboard.putNumber("enc rIGHT pos: ", swerveRight.getPosition() );
                System.out.println("swerveRight final Positon: " + swerveRight.getPosition());
                System.out.println("swerveLeft final position: " + swerveLeft.getPosition());
            } catch (CANTimeoutException ex) {
            }  
        }
    }
    
    public void disableSwerve() {
        try {
                swerveLeft.disableControl();
                swerveRight.disableControl();
            } catch (CANTimeoutException ex) {
                ex.printStackTrace();
            }      
    }
    
    public void encodedTurn(double direction) {
        if (swerveLeft != null  && swerveRight != null) {
            //set movement to use quadrature encoders as given
            System.out.println("encodedTurn() enabled with direction: " + direction);
            //move both jags 10 rotations with cpr = 360
              try {
                swerveLeft.enableControl();
                swerveRight.enableControl();
                System.out.println("swerveRight initial Position: " + swerveRight.getPosition());
                System.out.println("swerveLeft initial Position: " + swerveLeft.getPosition());
                swerveRight.setX(direction);
                swerveLeft.setX(direction);
            } catch (CANTimeoutException ex) {
                ex.printStackTrace();
            }           
            try { 
                SmartDashboard.putNumber("enc LEFT pos: ",swerveLeft.getPosition() );
                SmartDashboard.putNumber("enc rIGHT pos: ", swerveRight.getPosition() );
                System.out.println("swerveRight final Positon: " + swerveRight.getPosition());
                System.out.println("swerveLeft final position: " + swerveLeft.getPosition());
            } catch (CANTimeoutException ex) {
            }  
        }
    }
}

