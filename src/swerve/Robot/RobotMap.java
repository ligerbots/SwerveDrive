// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.


package swerve.Robot;
    
import swerve.subsystems.CANJags;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.can.CANTimeoutException;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANJaguar driveTrainJaguarLeftFront;
    public static CANJaguar driveTrainJaguarRightFront;
    public static CANJaguar driveTrainJaguarLeftBack;
    public static CANJaguar driveTrainJaguarRightBack;
    public static RobotDrive driveTrainRobotDrive41;
    public static CANJaguar swerveRight;//swerve right
    public static CANJaguar swerveLeft;//swerve left
    public static RobotDrive swerveDrive;
    //public static Gyro driveTrainGyro;
    
    /*public static CANJaguar shooterAngleControl;
    public static AnalogChannel shooterAngleSensor;
    public static Relay acquisitionRoller;

    public static CANJaguar acquisitionScrewlift;
    public static DigitalInput rotaryLimitSwitch;
    public static DigitalInput acquisitionRotaryLimitSwitch;
    public static DigitalInput bottomAcquisitionSwitch;
    public static DigitalInput topAcquisitionSwitch;
    public static boolean limHit=false;*/
    public static final int JAGUAR_COUNT = 6;
    public static CANJags jags = new CANJags(JAGUAR_COUNT);
    //leftSwerveEncoder
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  
    public static void init() {
        driveTrainJaguarLeftFront = jags.init(1, "Left Front");
        driveTrainJaguarLeftBack = jags.init(3, "Left Back");
        driveTrainJaguarRightBack = jags.init(4, "Right Back");
        driveTrainJaguarRightFront = jags.init(6, "Right Front");
        swerveRight = jags.init(5, "Right Swerve motor"); //swerve right
        swerveLeft = jags.init(2, "Left Swerve motor");//swerve left
               
        
        /*driveTrainGyro = new Gyro(1);
	LiveWindow.addSensor("DriveTrain", "Gyro", driveTrainGyro);
        driveTrainGyro.setSensitivity(0.007);	
        //acquisitionScrewlift = jags.init(8, "Elevator Coils");
        //shooterAngleControl = jags.init(4, "Shooter Tilt");*/
        if (driveTrainJaguarLeftFront!= null && driveTrainJaguarLeftBack!=null &&
               driveTrainJaguarRightFront!=null &&  driveTrainJaguarRightBack!=null) {
            driveTrainRobotDrive41 = new RobotDrive(driveTrainJaguarLeftFront, driveTrainJaguarLeftBack,
                                                    driveTrainJaguarRightFront, driveTrainJaguarRightBack);
            driveTrainRobotDrive41.setSafetyEnabled(false);
            driveTrainRobotDrive41.setExpiration(10);
            driveTrainRobotDrive41.setSensitivity(0.5);
            driveTrainRobotDrive41.setMaxOutput(1.0);
            driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontRight, false);
            driveTrainRobotDrive41.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, false);
            /*
            swerveDrive = new RobotDrive(swerveLeft, swerveRight);
            swerveDrive.setSafetyEnabled(false);
            swerveDrive.setExpiration(10);
            swerveDrive.setSensitivity(0.5);
            swerveDrive.setMaxOutput(1.0);
            swerveDrive.setInvertedMotor(RobotDrive.MotorType.kFrontRight, true);
            swerveDrive.setInvertedMotor(RobotDrive.MotorType.kRearRight, true);
            */
        }
        /*
           try {
                swerveRight.changeControlMode(CANJaguar.ControlMode.kPosition);
                swerveRight.setPositionReference(CANJaguar.PositionReference.kQuadEncoder);
                swerveRight.setPID(16,1,0.2);
                //20,2,0.1
                swerveRight.configEncoderCodesPerRev(360);
                // 50,5,0 and setx(1) =about 360 deg
                swerveLeft.changeControlMode(CANJaguar.ControlMode.kPosition);
                swerveLeft.setPositionReference(CANJaguar.PositionReference.kQuadEncoder);
                swerveLeft.setPID(swerveRight.getP(),swerveRight.getI(),swerveRight.getD());
                swerveLeft.configEncoderCodesPerRev(360);
            } catch (CANTimeoutException ex) {
                ex.printStackTrace();
            }
            */
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
}
